## JPA

- Java Persistence API
- 자바 진영의 ORM 기술 표준

## ORM

  Object -Relational Mapping (객체 관계 매핑) 

객체는 객체대로 설계하고 관계형 데이터베이스는 관계형 데이터베이스대로 설계를 한다음  ORM 프레임워크가 이걸 매핑을 해준다는 말임

대중적인 언어에는 대부분 ORM이 존재함

JPA는 애플리케이션이랑 JDBC 사이에서 동작함 

JPA에게 명령을 하면 JPA가 JDBC API를 사용해서 SQL을 호출하고 만들어서 보내고 그 결과를 받아서 동작하게 됨

## JPA 동작 - 저장 (조회도 거의 비슷함)



1. 예를 들어서 MemberDAO에서 객체를 저장하고 싶다고 하면 JPA에게 멤버 객체를 올리면 JPA가 멤버 객체를 분석을 함 
2.   JPA가 적절한 INSERT Query를 생성을 해서 JPA가  JDBC API를사용해서 INSERT Query를  DB에 보냄
3.  중요한 건 쿼리를 개발자가 만드는게 아니라 JPA가 만들어줌
4.  DB에 보내고 결과를 받음 여기서 중요한 게 패러다임의 불일치를 해결해준다는거임

## JPA는 표준 명세

- JPA는 인터페이스의 모음 - 실제로 동작하는게 아님

## JPA를 왜 사용해야 하는가?

1. 생산성 - 코드가 다 만들어져있음 조회할 때도 조회할 객체 타입이랑 식별자만 넣으면 결과를 받을 수 있음 수정이 환상적임.  setName에 내가 원하는 이름을 넣으면 이름이 바뀌어서 DB에 UPDATE 쿼리가 나감 이게 어떻게 가능하냐면 JPA를 쓴다는 것은 자바 컬렉션에 데이터를 넣었다 빼는 것처럼 생각함
2.  유지보수 - 기존에 수정하려고 하면  쿼리를 다 수정해야함 근데 JPA를 사용하면 DB에 추가하려는 컬럼만 있으면  컬럼만 코드에서 추가하면 됨

## JPA와 패러다임의 불일치 해결 - 관계형 데베와 객체의 패러다임 불일치를 해결함

 개발자는 데이터 베이스의 구조를 고민하지 않고 , 알아서 쿼리를 바꿔줌

JPA는 지연로딩이라는 기능이 있어서 객체를 조회해서 사용하는 시점에 SQL에사 데이터가 나와서 채워짐 그런거를 써서 자유롭게 객체 그래프 탐색 가능(데이터가 다 있다는 가정 하에)

JPA는 같은 트랜잭션에서 조회한 엔티티는 똑같음을 보장함

## JPA의 성능 최적화 기능

중간계층에 있으면 할 수 있는게 모아서 쓰는 버퍼링과 읽을 때 캐싱하는 걸 할 수 있음  JPA는 중간 계층임

1. 같은 트랜잭션 안에서는 같은 엔티티를 반환함 - 약간의 조회 성능 향상

중간에 똑같은 멤버를 자꾸 조회하는 로직이 있다면  처음에 아이디가 100인       멤버를 SQL이 날라와서 m1에 가져옴 그런데 두번째 똑가은 PK 값이 들어가면 J PA는 메모리에 있던 첫번째 m1을 그대로 반환해줌 결과적으로 SQL이 한번만 실행됨 —굉장히 짧은 시간의 캐싱임 그래서 크게 도움은 안됨 

1. 트랜잭션을 지원하는 쓰기 지연 

member a , b, c를 insert해야할 때 쿼리 3개를 모아서 DB에 보낼 수 있는 기능이 있음 이게 JDBC BATCH , 근데 이걸 쓰면 코드가 지저분해짐 근데 JPA를 쓰면 옵션 하나를 켜면 비슷한 쿼리들을 모아서 보내버림 

데이터베이스는 트랜잭션이 정말 중요함 트랜잭션 커밋하기 전에만 쏘면 됨 그래서 member a ,b, c가 들어오면 메모리에 착착 쌓았다가 커밋되는 순간 3개가 똑같다고 보면 네트워크로 한번에 보냄

1. 지연 로딩과 즉시 로딩


지연 로딩은 쿼리가 2번이어서 네트워크를 2번 탐 그런데 보니까 member를 조회하면 거의 team을 같이 써 , 그러면  그냥 멤버를 조회할 때 팀을 무조건 가져오는 게 나음 JPA에서 옵션을 켜면 한번에 가져올 수 있음

## 데이터 베이스 방언

     JPA는 특정 데이터 베이스에 종속 되어있지 않게 되어있음

     각각의 데이터베이스에서 표준적이지 않은 걸 방언이라고 표현함

     persistence.xml에 어떤 데베 방언을 쓰는지 표현해줘야함

     JPA에서는 트랜잭션이라는 단위가 엄청 중요함 

     데이터를 변경하는 모든 작업은 트랜잭션 안에서 작업해야함 

```java

        EntityManagerFactory emf = Persistence.createEntityManagerFactory("hello");

        EntityManager em = emf.createEntityManager();

        EntityTransaction tx = em.getTransaction();
        tx.begin();
        try {
            Member member = new Member();

            member.setId(2L);
            member.setName("HelloB");
            em.persist(member);
            tx.commit();
        }catch(Exception e){
             tx.rollback();
        }finally {
            em.close();//꼭 닫아줘야함
        }

        emf.close();
    
```

EntityManager을 마치 자바 컬렉션처럼 이해하면 됨 내 객체를 대신 저장해주는 거라고 생각해

JPA를 통해서 데이터를 가져오면 JPA가 관리를 함 그래서 JPA가 데이터가 변경이 됐는지 안됐는지 트랜잭션이 커밋하는 시점에 다 확인을 함

바뀌었다는 걸 알면 트랜잭션 커밋하기 직전에 UPDATE 쿼리를 날림

 EntityManagerFactory는 웹서버에서 고객의 요청이 오면 썼다가 버렸다가 동 작함 

 그래서 EntityManager은 스레드간에 공유하면 안됨 

JPA 입장에서 코드를 짤 때 멤버 객체를 대상으로 쿼리를 함

```java
List<Member> result = em.createQuery("select m from Member as m", Member.class)
                          .getResultList();
```

JPQL은 엔티티 객체를 대상으로 쿼리

SQL은 데이터베이스 테이블을 대상으로 쿼리

# 영속성 관리

### JPA에서 가장 중요한 두가지

- 객체와 관계형 데이터 매핑하기 - 설계와 관련 , 정적임
- 영속성 컨텍스트 - 실제 JPA가 내부에서 어떻게 동작하는지 관련

### 예를 들어 웹 어플리케이션을 개발한다고 하면

1. EntityManageFactory를 통해서 고객의 요청이 올 때마다 EntityManager을 생성함
2. 이 EntityManager은 내부적으로 테이터베이스 커넥션을 사용해서 DB를 사용함

## 영속성 컨텍스트

- “엔티티를 영구 저장하는 환경”이라는 뜻
- EntityManager.persist(entity); - 엔티티를 DB에 저장한다는 뜻이 아니라 영속성 컨텍스트라는 곳에 저장해서 엔티티를 영속화함
- 엔티티 매니저를 통해서 영속성 컨텍스트에 접근함
- EntityManager을 생성하면 그 안에 영속석 컨텍스트(PersistenceContext)가 1:1로 생성됨

### 엔티티의 생명주기

- 비영속(new/transient)- 최초로 객체를 생성한 상태를 new라고 함, 영속성 컨텍스트와 관련이 없는 전혀 새로운 상태
- 영속(managed) - 객체.persist하면 영속 상태가 됨 영속성 컨텍스트에 관리되는 상태
- 준영속(detached) - 영속성 컨텍스트에서 분리
- 삭제(removed)

### 비영속

객체를 생성만 하고 엔티티 매니저에 아무것도 안넣은 상태 

JPA랑 관계없는 상태

```java
//객체를 생성한 상태
Member member = new Member();
member.setId("member1");
member.setUsername("회원1");
```

### 영속

영속성 컨텍스트 안에 객체가 들어가면서 영속 상태가 됨

```java
//객체를 생성한 상태(비영속) 
Member member = new Member(); 
member.setId("member1"); 
member.setUsername(“회원1”);
EntityManager em = emf.createEntityManager();
em.getTransaction().begin();
//객체를 저장한 상태(영속)
em.persist(member)
```

영속 상태가 된다고 해서 DB에 쿼리가 바로 가는게 아님 

트랜잭션을 커밋하는 시점에 영속성 안에 있는게 쿼리가 날아감

고객의 요청이 들어오고 비즈니즈가 끝나면 영속성 컨텍스트를 지움 , 1차캐시도 없어짐

### 영속 엔티티의 동일성 보장

JPA가 영속 엔티티의 동일성을 보장해줌 

자바 컬렉션에서 꺼내서 똑같은 레퍼런스의 객체를 꺼내면 똑같다는 것처럼 (뭔말인지 모르겠네)

**엔티티 등록- 트랜잭션을 지원하는 쓰기 지연**

```java
EntityManager em = emf.createEntityManager();
EntityTransaction transaction = em.getTransaction();
//엔티티 매니저는 데이터 변경시 트랜잭션을 시작해야 한다.
transaction.begin(); // [트랜잭션] 시작
em.persist(memberA);
em.persist(memberB);
//여기까지 INSERT SQL을 데이터베이스에 보내지 않는다.
//커밋하는 순간 데이터베이스에 INSERT SQL을 보낸다.
transaction.commit(); // [트랜잭션] 커밋
```

1. persist(memberA)해서 넣으면 memberA가 1차 캐시에 들어가고 동시에 JPA가 엔티티를 분석을 해서 INSERT 쿼리를 생성함 그리고 쓰기 지연 SQL 저장소라는 곳에 쌓아둠 , memberB도 같음
2. 트랜잭션을 커밋하는 시점에 쓰기 지연 SQL저장소에 있던 것들이 flush가 되면서 DB로 감

JPA는 기본 생성자가 하나 있어야함

```java
public Member(){
}
```

### 엔티티 수정 - 변경 감지

수정하고 나서 persist나 update 안해줘도 됨

## 플러쉬

영속성 컨텍스트의 변경내용을 데이터 베이스에 반영하는 것

커밋하기 전에 미리 DB에 반영하고 싶거나 쿼리를 미리 보고 싶을 때 사용하면 됨

플라쉬를 해도 1차캐시는 유지도미 영속성 컨텍스트에 있는 쓰기 지연 SQL저장소에 있는 걸  DB에 반영하는거임

[**FlushModeType.AUTO**](http://FlushModeType.AUTO) - 커밋이나 쿼리를 실행할 때 플러시(기본값) 그냥 오토 써

FlushModeType.COMMIT - 커밋할 때만 플러시

영속성 컨텍스트를 비우지 않음 

영속성 컨텍스트의 변경내용을 데이터베이스에 동기화하는거임

## 준영속상태

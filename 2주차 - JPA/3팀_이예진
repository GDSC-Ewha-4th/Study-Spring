객체 지향 프로그래밍: 추상화, 캡슐화, 정보은닉, 상속, 다형성 등 시스템의 복잡성을 제어 할 수 있는 다양한 장치들을 제공


관계형 DB/
객체를 SQL로 바꿔야 한다
-- 개발자가 SQL 매퍼 역할을 한다


객체는 참조를 사용
객체는 테이블에 맞추어 모델링
모든 객체를 미리 모델링할 수 없다

진정한 의미의 계층 분할이 어렵다
JDBC API ->DB JPA 스스로 만든다
패러다임의 불일치를 해결해 준다

JPA 인터페이스의 모음
유지보수- 기존 필드 변경시 모든 SQL 수정
필드만 추가가 되면 알아서 JPA가 처리를 한다
상속관계-
연관관계

같은 트랜잭션 조회한 앤티티는 같은 것으로 취급한다
성능 떨어지지 않나?
-	중간계층이 있다면 buffering & cacheing

영속성 컨택스트

entitymanager

--엔티티를 영구 저장하는 환경

EntityManager.persist(entity)
DB 저장하는 게 아니라 entity를 영속성 컨텍스트에 저장

영속성 컨텍스트- 논리적인 개념. 눈에 보이지 않다/
entityManager 안에 넣기..
